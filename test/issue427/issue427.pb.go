// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: issue427.proto

package issue427

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import bytes "bytes"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type Foo struct {
	Foo                  string   `protobuf:"bytes,1,opt,name=foo,proto3" json:"foo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Foo) Reset()         { *m = Foo{} }
func (m *Foo) String() string { return proto.CompactTextString(m) }
func (*Foo) ProtoMessage()    {}
func (*Foo) Descriptor() ([]byte, []int) {
	return fileDescriptor_issue427_a93dda3c1ff80c81, []int{0}
}
func (m *Foo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Foo.Unmarshal(m, b)
}
func (m *Foo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Foo.Marshal(b, m, deterministic)
}
func (dst *Foo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Foo.Merge(dst, src)
}
func (m *Foo) XXX_Size() int {
	return xxx_messageInfo_Foo.Size(m)
}
func (m *Foo) XXX_DiscardUnknown() {
	xxx_messageInfo_Foo.DiscardUnknown(m)
}

var xxx_messageInfo_Foo proto.InternalMessageInfo

func (m *Foo) GetFoo() string {
	if m != nil {
		return m.Foo
	}
	return ""
}

func init() {
	proto.RegisterType((*Foo)(nil), "issue427.Foo")
}
func (this *Foo) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Foo)
	if !ok {
		that2, ok := that.(Foo)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Foo != that1.Foo {
		return false
	}
	if !bytes.Equal(this.XXX_unrecognized, that1.XXX_unrecognized) {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Bar service

type BarClient interface {
	GetBar(ctx context.Context, in *Foo, opts ...grpc.CallOption) (*Foo, error)
}

type barClient struct {
	cc *grpc.ClientConn
}

func NewBarClient(cc *grpc.ClientConn) BarClient {
	return &barClient{cc}
}

func (c *barClient) GetBar(ctx context.Context, in *Foo, opts ...grpc.CallOption) (*Foo, error) {
	out := new(Foo)
	err := c.cc.Invoke(ctx, "/issue427.Bar/GetBar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Bar service

type BarServer interface {
	GetBar(context.Context, *Foo) (*Foo, error)
}

func RegisterBarServer(s *grpc.Server, srv BarServer) {
	s.RegisterService(&_Bar_serviceDesc, srv)
}

func _Bar_GetBar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Foo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BarServer).GetBar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/issue427.Bar/GetBar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BarServer).GetBar(ctx, req.(*Foo))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bar_serviceDesc = grpc.ServiceDesc{
	ServiceName: "issue427.Bar",
	HandlerType: (*BarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBar",
			Handler:    _Bar_GetBar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "issue427.proto",
}

func NewPopulatedFoo(r randyIssue427, easy bool) *Foo {
	this := &Foo{}
	this.Foo = string(randStringIssue427(r))
	if !easy && r.Intn(10) != 0 {
		this.XXX_unrecognized = randUnrecognizedIssue427(r, 2)
	}
	return this
}

type randyIssue427 interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneIssue427(r randyIssue427) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringIssue427(r randyIssue427) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneIssue427(r)
	}
	return string(tmps)
}
func randUnrecognizedIssue427(r randyIssue427, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldIssue427(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldIssue427(dAtA []byte, r randyIssue427, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateIssue427(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateIssue427(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateIssue427(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateIssue427(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateIssue427(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateIssue427(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateIssue427(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Foo) Size() (n int) {
	var l int
	_ = l
	l = len(m.Foo)
	if l > 0 {
		n += 1 + l + sovIssue427(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovIssue427(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozIssue427(x uint64) (n int) {
	return sovIssue427(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}

func init() { proto.RegisterFile("issue427.proto", fileDescriptor_issue427_a93dda3c1ff80c81) }

var fileDescriptor_issue427_a93dda3c1ff80c81 = []byte{
	// 147 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0x2c, 0x2e, 0x2e,
	0x4d, 0x35, 0x31, 0x32, 0xd7, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0xa5, 0x74,
	0xd3, 0x33, 0x4b, 0x32, 0x4a, 0x93, 0xf4, 0x92, 0xf3, 0x73, 0xf5, 0xd3, 0xf3, 0xd3, 0xf3, 0xf5,
	0xc1, 0x0a, 0x92, 0x4a, 0xd3, 0xc0, 0x3c, 0x30, 0x07, 0xcc, 0x82, 0x68, 0x54, 0x12, 0xe7, 0x62,
	0x76, 0xcb, 0xcf, 0x17, 0x12, 0xe0, 0x62, 0x4e, 0xcb, 0xcf, 0x97, 0x60, 0x54, 0x60, 0xd4, 0xe0,
	0x0c, 0x02, 0x31, 0x8d, 0x74, 0xb9, 0x98, 0x9d, 0x12, 0x8b, 0x84, 0xd4, 0xb8, 0xd8, 0xdc, 0x53,
	0x4b, 0x40, 0x2c, 0x5e, 0x3d, 0xb8, 0x9d, 0x6e, 0xf9, 0xf9, 0x52, 0xa8, 0x5c, 0x27, 0x81, 0x1f,
	0x0f, 0xe5, 0x18, 0x57, 0x3c, 0x92, 0x63, 0xdc, 0xf1, 0x48, 0x8e, 0xf1, 0xc1, 0x23, 0x39, 0xc6,
	0x24, 0x36, 0xb0, 0x05, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe6, 0xa9, 0xa6, 0x28, 0xab,
	0x00, 0x00, 0x00,
}
